{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5.2 線形探索"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "n = 5\n",
    "S = [1, 2, 3, 4, 5]\n",
    "q = 3\n",
    "T = [3, 4, 1]\n",
    "\n",
    "C = 0\n",
    "\n",
    "for t in T:\n",
    "    for s in S:\n",
    "        if t == s:\n",
    "            C += 1            \n",
    "\n",
    "print(C)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# 関数化する　番兵使うと定数倍の高速化が見込める"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def linearSearch(A, n, key):\n",
    "    i = 0\n",
    "    A[n] = key\n",
    "    while A[i] != key:\n",
    "        i += 1\n",
    "    return i != n\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "C = 0\n",
    "for t in T:\n",
    "    if linearSearch(S, len(S)-1, t):\n",
    "        C += 1\n",
    "print(C)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5.3 二分探索"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "n = 5\n",
    "S = [1, 2, 3, 4, 5]\n",
    "q = 3\n",
    "T = [3, 4, 1, 0]\n",
    "\n",
    "C = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def binarySearch(A, n, key):\n",
    "    mid = int(n/2)\n",
    "    Flg = True\n",
    "    while Flg:\n",
    "        old = mid\n",
    "        if A[mid] == key:\n",
    "            return mid\n",
    "        elif A[mid] > key:\n",
    "            mid += int(mid/2)\n",
    "            if mid == old:\n",
    "                return False\n",
    "        else:\n",
    "            mid -= int(mid/2)\n",
    "            if mid == old:\n",
    "                return False\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def binarySearch(A, n, key):\n",
    "    left = 0\n",
    "    right = n\n",
    "    while left < right:\n",
    "        mid = int((left + right)/2)\n",
    "        if A[mid] == key:\n",
    "            return mid\n",
    "        elif key < A[mid]:\n",
    "            right = mid\n",
    "        else:\n",
    "            left = mid + 1\n",
    "    return -1\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "C = 0\n",
    "for t in T:\n",
    "    ret = binarySearch(S, len(S)-1, t)\n",
    "    if ret > -1:\n",
    "        C += 1\n",
    "print(C)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5.4 ハッシュ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "M = 1046527\n",
    "H = [None for _ in range(M)]\n",
    "V = [None for _ in range(M)]\n",
    "\n",
    "def getChar(char):\n",
    "    if char == 'A':\n",
    "        return 1\n",
    "    elif char == 'C':\n",
    "        return 2\n",
    "    elif char == 'G':\n",
    "        return 3\n",
    "    elif char == 'T':\n",
    "        return 4\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "    \n",
    "def getKey(str):\n",
    "    sum = 0; p = 1;\n",
    "    for s in str:\n",
    "        sum += p * getChar(s)\n",
    "        p *= 5\n",
    "    return sum\n",
    "\n",
    "def h1(key):\n",
    "    return key % M\n",
    "\n",
    "def h2(key):\n",
    "    return 1 + (key % (M-1))\n",
    "\n",
    "def h(key, i):\n",
    "    return (h1(key) + h2(key)) % M \n",
    "\n",
    "def insert(str):\n",
    "    key = getKey(str)\n",
    "    i = 0\n",
    "    while True:\n",
    "        j = h(key, i)\n",
    "        if H[j] == None:\n",
    "            H[j] = key\n",
    "            return j\n",
    "        elif H[j] == key:\n",
    "            return j                \n",
    "        else:\n",
    "            i += 1\n",
    "            \n",
    "def search(str):\n",
    "    key = getKey(str)\n",
    "    i = 0\n",
    "    while True:\n",
    "        j = h(key, i)\n",
    "        if H[j] == key:\n",
    "            return j\n",
    "        elif H[j] == None or i >= M:\n",
    "            return False\n",
    "        else:\n",
    "            i += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "yes\n",
      "no\n",
      "yes\n"
     ]
    }
   ],
   "source": [
    "n = 6\n",
    "com = ['insert', 'insert', 'find', 'find', 'insert', 'find']\n",
    "str = ['AAA', 'AAC', 'AAA', 'CCC', 'CCC', 'CCC']\n",
    "\n",
    "for i in range(n):\n",
    "    if com[i][0] == 'i':\n",
    "        insert(str[i])\n",
    "    else:\n",
    "        ret = search(str[i])\n",
    "        if ret == False:\n",
    "            print('no')\n",
    "        else:\n",
    "            print('yes')\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5.5 標準ライブラリSTLの紹介"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5.6 探索の応用：最適解の計算"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    }
   ],
   "source": [
    "n = 5\n",
    "k = 3\n",
    "w = [8, 1, 7, 3, 9]\n",
    "\n",
    "def calcEnableNum(P):\n",
    "    capable = [0 for _ in range(k)]\n",
    "    cnt = 0\n",
    "    for weight in w:\n",
    "        for no in range(k):\n",
    "            if capable[no] <= P - weight:\n",
    "                capable[no] += weight\n",
    "                cnt += 1\n",
    "                break\n",
    "            if no == w[-1]:\n",
    "                # 積めるトラックが見つからなかった\n",
    "                return cnt\n",
    "    return cnt\n",
    "    \n",
    "# 二分探索で最適なPを求める\n",
    "def binarySearch(n, key):\n",
    "    left = 0\n",
    "    right = n\n",
    "\n",
    "    while right - left > 1: # 差が1になるまでループ = 境界値を求めるため\n",
    "        mid = int((left + right)/2)\n",
    "        num = calcEnableNum(mid)\n",
    "        #if num == key: # 最大検出でも限界まで小さくしたいため\n",
    "        #    return mid\n",
    "        if num >= key:\n",
    "            right = mid\n",
    "        else:\n",
    "            left = mid\n",
    "    return mid\n",
    "\n",
    "maxP = 100000 * 10000\n",
    "ret = binarySearch(maxP, 5)\n",
    "print(ret)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
